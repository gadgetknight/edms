EDSI Veterinary Management System - Complete Code Export
======================================================================
Export Date: 2025-05-12 19:35:36
Total Files: 20
======================================================================


================================================================================
FILE 1/20: main.py
================================================================================

# main.py

"""
EDSI Veterinary Management System - Main Application Entry Point
Version: 1.0.2
Purpose: Manages application lifecycle, authentication flow, and primary navigation.
Last Updated: May 12, 2025
Author: Claude Assistant

Changelog:
- v1.0.2 (2025-05-12): Integrated Unified Horse Management
  - Added connection to new HorseUnifiedManagement screen
  - Updated menu to use single horse management option
  - Removed old horse-related menu items (add, edit, delete separately)
  - Simplified main menu signal handling for horse operations
  - Cleaned up old horse screen references and cleanup
- v1.0.1 (2025-05-12): Added Horse Management functionality
  - Connected "Review/Update Horse Info" to Horse Main Screen
  - Added horse edit workflow (select horse -> edit form)
  - Implemented proper screen transitions for horse management
  - Added cleanup for horse main screen
  - Integrated horse search and edit functionality
- v1.0.0 (2025-05-12): Initial implementation
  - Created complete application entry point
  - Implemented authentication flow (splash -> login -> main menu)
  - Added database initialization and management
  - Included proper logging and error handling
  - Created modular signal-slot architecture for navigation
  - Added proper cleanup and exit handling
"""

import sys
import logging
from PyQt6.QtWidgets import QApplication
from PyQt6.QtCore import QTimer
from config.database_config import db_manager
from config.app_config import AppConfig
from views.auth.splash_screen import SplashScreen
from views.auth.login_screen import LoginScreen
from views.main_menu import MainMenu
from models import *  # Import all models to register them


class EDSIApplication:
    """Main application class that manages the application flow"""

    def __init__(self):
        self.setup_logging()
        self.logger = logging.getLogger(self.__class__.__name__)

        # Create Qt application
        self.app = QApplication(sys.argv)
        self.app.setApplicationName(AppConfig.APP_NAME)
        self.app.setApplicationVersion(AppConfig.APP_VERSION)

        # Initialize database
        self.initialize_database()

        # Current user
        self.current_user = None

        # Application windows
        self.splash_screen = None
        self.login_screen = None
        self.main_menu = None
        self.horse_management_screen = None

    def setup_logging(self):
        """Configure application logging"""
        import os

        # Create logs directory if it doesn't exist
        logs_dir = AppConfig.get_logs_dir()

        # Configure logging
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            handlers=[
                logging.FileHandler(os.path.join(logs_dir, "edsi.log")),
                logging.StreamHandler(sys.stdout),
            ],
        )

    def initialize_database(self):
        """Initialize database connection and create tables"""
        try:
            self.logger.info("Initializing database...")
            db_manager.initialize_database()
            self.logger.info("Database initialized successfully")
        except Exception as e:
            self.logger.error(f"Failed to initialize database: {e}")
            sys.exit(1)

    def run(self):
        """Run the application"""
        self.logger.info("Starting EDSI Veterinary Management System")

        # Show splash screen
        self.show_splash_screen()

        # Start the Qt event loop
        sys.exit(self.app.exec())

    def show_splash_screen(self):
        """Display the splash screen"""
        self.splash_screen = SplashScreen()
        self.splash_screen.splash_closed.connect(self.on_splash_closed)
        self.splash_screen.show()

    def on_splash_closed(self):
        """Handle splash screen closure"""
        self.splash_screen.deleteLater()
        self.splash_screen = None
        self.show_login_screen()

    def show_login_screen(self):
        """Display the login screen"""
        self.login_screen = LoginScreen()
        self.login_screen.login_successful.connect(self.on_login_successful)
        self.login_screen.exit_requested.connect(self.on_exit_requested)
        self.login_screen.show()

    def on_login_successful(self, user_id):
        """Handle successful login"""
        self.current_user = user_id
        self.logger.info(f"User '{user_id}' logged in successfully")

        # Close login screen
        self.login_screen.deleteLater()
        self.login_screen = None

        # Show main menu
        self.show_main_menu()

    def on_exit_requested(self):
        """Handle exit request from login screen"""
        self.logger.info("Exit requested from login screen")
        self.cleanup_and_exit()

    def show_main_menu(self):
        """Display the main menu"""
        self.main_menu = MainMenu(self.current_user)

        # Connect menu signals to handlers (updated for unified approach)
        self.main_menu.horse_management_selected.connect(self.on_horse_management)
        self.main_menu.table_maintenance_selected.connect(self.on_table_maintenance)
        self.main_menu.print_reports_selected.connect(self.on_print_reports)
        self.main_menu.owners_ar_selected.connect(self.on_owners_ar)
        self.main_menu.system_utilities_selected.connect(self.on_system_utilities)
        self.main_menu.mass_update_selected.connect(self.on_mass_update)
        self.main_menu.logoff_exit_selected.connect(self.on_logoff_exit)
        self.main_menu.logoff_no_exit_selected.connect(self.on_logoff_no_exit)

        self.main_menu.show()

    # Menu handlers
    def on_horse_management(self):
        """Handle unified horse management selection"""
        self.logger.info("Horse Management selected")

        # Import here to avoid circular imports
        from views.horse.horse_unified_management import HorseUnifiedManagement

        # Create and show the unified horse management screen
        self.horse_management_screen = HorseUnifiedManagement(
            current_user=self.current_user
        )
        self.horse_management_screen.exit_requested.connect(
            self.on_horse_management_exit
        )
        self.horse_management_screen.show()

        # Hide main menu while horse management screen is open
        self.main_menu.hide()

    def on_table_maintenance(self):
        """Handle table maintenance selection"""
        self.logger.info("Table maintenance selected")
        # TODO: Implement table maintenance screen
        self.main_menu.show_info(
            "Not Implemented", "Table maintenance feature coming soon!"
        )

    def on_print_reports(self):
        """Handle print reports selection"""
        self.logger.info("Print reports selected")
        # TODO: Implement print reports screen
        self.main_menu.show_info(
            "Not Implemented", "Print reports feature coming soon!"
        )

    def on_owners_ar(self):
        """Handle owners A/R selection"""
        self.logger.info("Owners A/R selected")
        # TODO: Implement owners A/R screen
        self.main_menu.show_info("Not Implemented", "Owners A/R feature coming soon!")

    def on_system_utilities(self):
        """Handle system utilities selection"""
        self.logger.info("System utilities selected")
        # TODO: Implement system utilities screen
        self.main_menu.show_info(
            "Not Implemented", "System utilities feature coming soon!"
        )

    def on_mass_update(self):
        """Handle mass update selection"""
        self.logger.info("Mass update selected")
        # TODO: Implement mass update screen
        self.main_menu.show_info("Not Implemented", "Mass update feature coming soon!")

    def on_logoff_exit(self):
        """Handle logoff and exit"""
        self.logger.info("Logoff and exit selected")
        if self.main_menu.show_question(
            "Confirm Exit", "Are you sure you want to logoff and exit?"
        ):
            self.cleanup_and_exit()

    def on_logoff_no_exit(self):
        """Handle logoff without exit"""
        self.logger.info("Logoff without exit selected")
        if self.main_menu.show_question(
            "Confirm Logoff", "Are you sure you want to logoff?"
        ):
            # Close main menu
            self.main_menu.close()
            self.main_menu.deleteLater()
            self.main_menu = None

            # Reset current user
            self.current_user = None

            # Show login screen again
            self.show_login_screen()

    def cleanup_and_exit(self):
        """Cleanup resources and exit application"""
        self.logger.info("Cleaning up and exiting application")

        # Close database connection
        db_manager.close()

        # Close all windows
        if self.main_menu:
            self.main_menu.close()
        if self.login_screen:
            self.login_screen.close()
        if self.splash_screen:
            self.splash_screen.close()
        if self.horse_management_screen:
            self.horse_management_screen.close()

        # Quit application
        self.app.quit()

    # Horse management callbacks
    def on_horse_management_exit(self):
        """Handle exit from Horse Management screen"""
        self.logger.info("Horse management screen exit requested")
        # Close the horse management screen and show main menu
        if self.horse_management_screen:
            self.horse_management_screen.close()
            self.horse_management_screen.deleteLater()
            self.horse_management_screen = None
        self.main_menu.show()


def main():
    """Main entry point"""
    app = EDSIApplication()
    app.run()


if __name__ == "__main__":
    main()

================================================================================
END OF main.py
================================================================================


================================================================================
FILE 2/20: config/__init__.py
================================================================================

# config/__init__.py

"""Configuration package"""

================================================================================
END OF config/__init__.py
================================================================================


================================================================================
FILE 3/20: config/app_config.py
================================================================================

# config/app_config.py

"""Application configuration settings"""

import os


class AppConfig:
    """Main application configuration"""

    # Application Information
    APP_NAME = "EDSI Veterinary Management System"
    APP_VERSION = "1.0.0"

    # Window Settings
    WINDOW_WIDTH = 1024
    WINDOW_HEIGHT = 768
    MIN_WINDOW_WIDTH = 800
    MIN_WINDOW_HEIGHT = 600

    # Colors
    PRIMARY_COLOR = "#0078d4"  # Professional blue
    SECONDARY_COLOR = "#6c757d"  # Neutral gray
    SUCCESS_COLOR = "#28a745"  # Green for confirmations
    WARNING_COLOR = "#ffc107"  # Yellow for warnings
    DANGER_COLOR = "#dc3545"  # Red for errors/critical
    BACKGROUND_COLOR = "#f8f9fa"  # Light gray background
    SURFACE_COLOR = "#ffffff"  # White cards/panels
    TEXT_COLOR = "#212529"  # Dark text
    TEXT_SECONDARY = "#6c757d"  # Gray text

    # Fonts
    DEFAULT_FONT_FAMILY = "Arial"
    DEFAULT_FONT_SIZE = 10
    HEADING_FONT_SIZE = 14
    SMALL_FONT_SIZE = 8
    MONO_FONT_FAMILY = "Consolas"  # For data alignment

    # Database Settings
    DATABASE_BACKUP_ENABLED = True
    DATABASE_BACKUP_FREQUENCY = 24  # hours

    # Session Settings
    SESSION_TIMEOUT = 3600  # seconds (1 hour)
    AUTO_LOGOUT_WARNING = 300  # seconds (5 minutes before logout)

    # Data Validation
    MAX_STRING_LENGTH = 255
    MAX_DESCRIPTION_LENGTH = 500
    MAX_NOTES_LENGTH = 1000

    # File Paths
    @staticmethod
    def get_app_dir():
        """Get application directory"""
        return os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    @staticmethod
    def get_database_path():
        """Get database file path"""
        return os.path.join(AppConfig.get_app_dir(), "edsi_database.db")

    @staticmethod
    def get_logs_dir():
        """Get logs directory"""
        logs_dir = os.path.join(AppConfig.get_app_dir(), "logs")
        os.makedirs(logs_dir, exist_ok=True)
        return logs_dir

    @staticmethod
    def get_reports_dir():
        """Get reports directory"""
        reports_dir = os.path.join(AppConfig.get_app_dir(), "reports")
        os.makedirs(reports_dir, exist_ok=True)
        return reports_dir

================================================================================
END OF config/app_config.py
================================================================================


================================================================================
FILE 4/20: config/database_config.py
================================================================================

# config/database_config.py

import os
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, scoped_session
from models import Base


class DatabaseManager:
    """Manages database connection and session creation"""

    def __init__(self, db_path=None):
        if db_path is None:
            # Create database in the application directory
            app_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            db_path = os.path.join(app_dir, "edsi_database.db")

        self.database_url = f"sqlite:///{db_path}"
        self.engine = None
        self.session_factory = None
        self.Session = None

    def initialize_database(self):
        """Initialize database connection and create tables"""
        self.engine = create_engine(
            self.database_url,
            echo=False,  # Set to True for SQL logging
            pool_pre_ping=True,
            connect_args={"check_same_thread": False},  # Needed for SQLite
        )

        # Create all tables
        Base.metadata.create_all(self.engine)

        # Create session factory
        self.session_factory = sessionmaker(bind=self.engine)
        self.Session = scoped_session(self.session_factory)

        # Create default admin user if it doesn't exist
        self._create_default_user()

    def get_session(self):
        """Get a new database session"""
        return self.Session()

    def close_session(self):
        """Close the current session"""
        self.Session.remove()

    def _create_default_user(self):
        """Create default admin user if none exists"""
        from models import User
        import hashlib

        session = self.get_session()
        try:
            # Check if any users exist
            user_count = session.query(User).count()
            if user_count == 0:
                # Create default admin user
                default_password = (
                    "admin123"  # In production, this should be more secure
                )
                password_hash = hashlib.sha256(default_password.encode()).hexdigest()

                admin_user = User(
                    user_id="ADMIN",
                    password_hash=password_hash,
                    user_name="System Administrator",
                    is_active=True,
                )
                session.add(admin_user)
                session.commit()
                print("Created default admin user (ADMIN/admin123)")
        finally:
            session.close()

    def close(self):
        """Close database connection"""
        if self.engine:
            self.engine.dispose()


# Global database manager instance
db_manager = DatabaseManager()

================================================================================
END OF config/database_config.py
================================================================================


================================================================================
FILE 5/20: models/__init__.py
================================================================================

# models/__init__.py

"""
SQLAlchemy models for EDSI Veterinary Management System
"""

# Import Base first since other modules need it
from .base_model import Base, BaseModel

# Import other models in dependency order
from .user_models import User, SystemConfig
from .reference_models import Species, StateProvince, ChargeCode, Veterinarian, Location
from .horse_models import Horse, HorseOwner, HorseLocation, HorseBilling
from .owner_models import Owner, OwnerBillingHistory, OwnerPayment

# Make Base available at package level
__all__ = [
    "Base",  # Make sure Base is exported
    "BaseModel",
    "User",
    "SystemConfig",
    "Species",
    "StateProvince",
    "ChargeCode",
    "Veterinarian",
    "Location",
    "Horse",
    "HorseOwner",
    "HorseLocation",
    "HorseBilling",
    "Owner",
    "OwnerBillingHistory",
    "OwnerPayment",
]

================================================================================
END OF models/__init__.py
================================================================================


================================================================================
FILE 6/20: models/base_model.py
================================================================================

# models/base_model.py

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import (
    Column,
    Integer,
    String,
    Float,
    DateTime,
    Boolean,
    Text,
    Date,
    ForeignKey,
)
from sqlalchemy.orm import relationship
from datetime import datetime

Base = declarative_base()


class BaseModel(Base):
    """Base model with common fields"""

    __abstract__ = True

    created_date = Column(DateTime, default=datetime.utcnow, nullable=False)
    modified_date = Column(
        DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False
    )

================================================================================
END OF models/base_model.py
================================================================================


================================================================================
FILE 7/20: models/user_models.py
================================================================================

# models/user_models.py

from sqlalchemy import Column, Integer, String, Boolean, DateTime
from sqlalchemy.orm import relationship
from .base_model import BaseModel


class User(BaseModel):
    """User table for login and authentication"""

    __tablename__ = "users"

    user_id = Column(String(20), primary_key=True)
    password_hash = Column(String(255), nullable=False)
    user_name = Column(String(100))
    is_active = Column(Boolean, default=True)
    last_login = Column(DateTime)
    printer_id = Column(String(20))
    default_screen_colors = Column(String(100))


class SystemConfig(BaseModel):
    """System configuration parameters"""

    __tablename__ = "system_config"

    config_key = Column(String(50), primary_key=True)
    config_value = Column(String(255))
    description = Column(String(255))

================================================================================
END OF models/user_models.py
================================================================================


================================================================================
FILE 8/20: models/reference_models.py
================================================================================

# models/reference_models.py

from sqlalchemy import Column, Integer, String, Boolean, Float, ForeignKey
from sqlalchemy.orm import relationship
from .base_model import BaseModel


class Species(BaseModel):
    """Species lookup table (Equine, Bovine, etc.)"""

    __tablename__ = "species"

    species_code = Column(String(10), primary_key=True)
    species_name = Column(String(50), nullable=False)
    is_active = Column(Boolean, default=True)


class StateProvince(BaseModel):
    """States and provinces lookup table"""

    __tablename__ = "states_provinces"

    state_code = Column(String(10), primary_key=True)
    state_name = Column(String(100), nullable=False)
    country_code = Column(String(10), default="US")
    is_active = Column(Boolean, default=True)


class ChargeCode(BaseModel):
    """Charge codes for billing"""

    __tablename__ = "charge_codes"

    charge_code = Column(String(20), primary_key=True)
    category = Column(String(50))
    description = Column(String(255), nullable=False)
    default_units = Column(Float)
    default_amount = Column(Float)
    gl_account = Column(String(20))
    is_active = Column(Boolean, default=True)


class Veterinarian(BaseModel):
    """Veterinarians table"""

    __tablename__ = "veterinarians"

    vet_id = Column(String(20), primary_key=True)
    last_name = Column(String(50), nullable=False)
    first_name = Column(String(50))
    full_name = Column(String(100))
    is_active = Column(Boolean, default=True)
    phone = Column(String(20))
    email = Column(String(100))


class Location(BaseModel):
    """Locations where horses are kept"""

    __tablename__ = "locations"

    location_id = Column(Integer, primary_key=True, autoincrement=True)
    location_name = Column(String(100), nullable=False)
    address_line1 = Column(String(100))
    address_line2 = Column(String(100))
    city = Column(String(50))
    state_code = Column(String(10), ForeignKey("states_provinces.state_code"))
    zip_code = Column(String(20))
    is_active = Column(Boolean, default=True)

    # Relationship
    state = relationship("StateProvince", back_populates="locations")


# Add the reverse relationship
StateProvince.locations = relationship("Location", back_populates="state")

================================================================================
END OF models/reference_models.py
================================================================================


================================================================================
FILE 9/20: models/horse_models.py
================================================================================

# models/horse_models.py

from sqlalchemy import (
    Column,
    Integer,
    String,
    Boolean,
    Date,
    Float,
    DateTime,
    ForeignKey,
    Text,
)
from sqlalchemy.orm import relationship
from .base_model import BaseModel


class Horse(BaseModel):
    """Basic horse information"""

    __tablename__ = "horses"

    horse_id = Column(Integer, primary_key=True, autoincrement=True)
    horse_name = Column(String(100), nullable=False)
    account_number = Column(String(20))
    species_code = Column(
        String(10), ForeignKey("species.species_code"), nullable=True
    )  # Made nullable
    breed = Column(String(50))
    color = Column(String(50))
    sex = Column(String(10))
    date_of_birth = Column(Date)
    registration_number = Column(String(50))
    microchip_id = Column(String(50))
    tattoo = Column(String(50))
    brand = Column(String(50))
    band_tag_number = Column(String(50))
    is_active = Column(Boolean, default=True)
    current_location_id = Column(Integer, ForeignKey("locations.location_id"))
    created_by = Column(String(20), ForeignKey("users.user_id"))
    modified_by = Column(String(20), ForeignKey("users.user_id"))

    # Relationships
    species = relationship("Species")
    location = relationship("Location")
    created_user = relationship("User", foreign_keys=[created_by])
    modified_user = relationship("User", foreign_keys=[modified_by])
    owners = relationship("HorseOwner", back_populates="horse")
    location_history = relationship("HorseLocation", back_populates="horse")
    billing_records = relationship("HorseBilling", back_populates="horse")


class HorseOwner(BaseModel):
    """Horse ownership percentages"""

    __tablename__ = "horse_owners"

    horse_owner_id = Column(Integer, primary_key=True, autoincrement=True)
    horse_id = Column(Integer, ForeignKey("horses.horse_id"), nullable=False)
    owner_id = Column(Integer, ForeignKey("owners.owner_id"), nullable=False)
    ownership_percentage = Column(Float)
    start_date = Column(Date)
    end_date = Column(Date)
    is_primary_contact = Column(Boolean, default=False)

    # Relationships
    horse = relationship("Horse", back_populates="owners")
    owner = relationship("Owner", back_populates="horses")


class HorseLocation(BaseModel):
    """Horse location history"""

    __tablename__ = "horse_locations"

    location_history_id = Column(Integer, primary_key=True, autoincrement=True)
    horse_id = Column(Integer, ForeignKey("horses.horse_id"), nullable=False)
    location_id = Column(Integer, ForeignKey("locations.location_id"), nullable=False)
    arrival_date = Column(DateTime)
    departure_date = Column(DateTime)
    reason = Column(String(255))
    notes = Column(String(500))

    # Relationships
    horse = relationship("Horse", back_populates="location_history")
    location = relationship("Location")


class HorseBilling(BaseModel):
    """Horse billing records"""

    __tablename__ = "horse_billing"

    billing_id = Column(Integer, primary_key=True, autoincrement=True)
    horse_id = Column(Integer, ForeignKey("horses.horse_id"), nullable=False)
    charge_date = Column(DateTime)
    charge_code = Column(String(20), ForeignKey("charge_codes.charge_code"))
    description = Column(String(255))
    quantity = Column(Float)
    unit_price = Column(Float)
    total_amount = Column(Float)
    owner_id = Column(Integer, ForeignKey("owners.owner_id"))
    billing_period = Column(String(20))
    is_reminder = Column(Boolean, default=False)
    reminder_type = Column(String(50))
    veterinarian_id = Column(String(20), ForeignKey("veterinarians.vet_id"))
    created_by = Column(String(20), ForeignKey("users.user_id"))

    # Relationships
    horse = relationship("Horse", back_populates="billing_records")
    charge = relationship("ChargeCode")
    owner = relationship("Owner")
    veterinarian = relationship("Veterinarian")
    created_user = relationship("User")

================================================================================
END OF models/horse_models.py
================================================================================


================================================================================
FILE 10/20: models/owner_models.py
================================================================================

# models/owner_models.py

from sqlalchemy import Column, Integer, String, Boolean, Float, DateTime, ForeignKey
from sqlalchemy.orm import relationship
from .base_model import BaseModel


class Owner(BaseModel):
    """Owner master file"""

    __tablename__ = "owners"

    owner_id = Column(Integer, primary_key=True, autoincrement=True)
    account_number = Column(String(20), unique=True)
    last_name = Column(String(50), nullable=False)
    first_name = Column(String(50))
    farm_name = Column(String(100))
    address_line1 = Column(String(100))
    address_line2 = Column(String(100))
    city = Column(String(50))
    state_code = Column(String(10), ForeignKey("states_provinces.state_code"))
    zip_code = Column(String(20))
    phone = Column(String(20))
    mobile_phone = Column(String(20))
    email = Column(String(100))
    is_active = Column(Boolean, default=True)
    balance = Column(Float, default=0)
    credit_limit = Column(Float, default=0)
    billing_terms = Column(String(50))
    service_charge_rate = Column(Float)
    discount_rate = Column(Float)

    # Relationships
    state = relationship("StateProvince")
    horses = relationship("HorseOwner", back_populates="owner")
    billing_history = relationship("OwnerBillingHistory", back_populates="owner")
    payments = relationship("OwnerPayment", back_populates="owner")


class OwnerBillingHistory(BaseModel):
    """Owner billing history"""

    __tablename__ = "owner_billing_history"

    history_id = Column(Integer, primary_key=True, autoincrement=True)
    owner_id = Column(Integer, ForeignKey("owners.owner_id"), nullable=False)
    charge_date = Column(DateTime)
    charge_code = Column(String(20), ForeignKey("charge_codes.charge_code"))
    description = Column(String(255))
    units = Column(Float)
    amount = Column(Float)
    balance_after = Column(Float)
    billing_period = Column(String(20))
    is_paid = Column(Boolean, default=False)
    payment_date = Column(DateTime)

    # Relationships
    owner = relationship("Owner", back_populates="billing_history")
    charge = relationship("ChargeCode")


class OwnerPayment(BaseModel):
    """Owner payments"""

    __tablename__ = "owner_payments"

    payment_id = Column(Integer, primary_key=True, autoincrement=True)
    owner_id = Column(Integer, ForeignKey("owners.owner_id"), nullable=False)
    payment_date = Column(DateTime)
    amount = Column(Float)
    payment_method = Column(String(50))
    reference_number = Column(String(50))
    notes = Column(String(255))

    # Relationships
    owner = relationship("Owner", back_populates="payments")

================================================================================
END OF models/owner_models.py
================================================================================


================================================================================
FILE 11/20: controllers/__init__.py
================================================================================

# controllers/__init__.py

"""Controllers package for EDSI application"""

================================================================================
END OF controllers/__init__.py
================================================================================


================================================================================
FILE 12/20: controllers/horse_controller.py
================================================================================

"""
EDSI Veterinary Management System - Horse Controller
Version: 1.0.1
Purpose: Business logic for horse management operations including CRUD, validation, and data processing.
Last Updated: May 12, 2025
Author: Claude Assistant

Changelog:
- v1.0.1 (2025-05-12): Removed species support for horses-only system
  - Removed get_species_list() method
  - Updated create_horse() to not handle species_code
  - Updated update_horse() to not handle species_code
  - Simplified search_horses() to remove species loading
  - Updated get_horse_by_id() to not load species relationship
  - Simplified validation to not check species-related fields
- v1.0.0 (2025-05-12): Initial implementation
  - Created HorseController class with CRUD operations
  - Implemented horse validation logic
  - Added search and filtering capabilities
  - Included proper error handling and logging
  - Added methods for horse-owner relationship management
"""

# controllers/horse_controller.py

import logging
from datetime import datetime, date
from typing import List, Optional, Tuple
from sqlalchemy.orm import Session
from sqlalchemy import or_, and_
from config.database_config import db_manager
from models import Horse, Owner, HorseOwner, Location


class HorseController:
    """Controller for horse management operations"""

    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)

    def create_horse(
        self, horse_data: dict, current_user: str
    ) -> Tuple[bool, str, Optional[Horse]]:
        """
        Create a new horse record

        Args:
            horse_data: Dictionary containing horse information
            current_user: Current logged-in user ID

        Returns:
            Tuple of (success, message, horse_object)
        """
        session = db_manager.get_session()
        try:
            # Validate required fields
            if not horse_data.get("horse_name", "").strip():
                return False, "Horse name is required", None

            # Create horse object (species_code removed)
            horse = Horse(
                horse_name=horse_data["horse_name"].strip(),
                account_number=horse_data.get("account_number", "").strip(),
                breed=horse_data.get("breed", "").strip(),
                color=horse_data.get("color", "").strip(),
                sex=horse_data.get("sex"),
                date_of_birth=self._parse_date(horse_data.get("date_of_birth")),
                registration_number=horse_data.get("registration_number", "").strip(),
                microchip_id=horse_data.get("microchip_id", "").strip(),
                tattoo=horse_data.get("tattoo", "").strip(),
                brand=horse_data.get("brand", "").strip(),
                band_tag_number=horse_data.get("band_tag_number", "").strip(),
                current_location_id=horse_data.get("current_location_id"),
                created_by=current_user,
                modified_by=current_user,
            )

            session.add(horse)
            session.commit()

            self.logger.info(
                f"Created new horse: {horse.horse_name} (ID: {horse.horse_id})"
            )
            return True, "Horse created successfully", horse

        except Exception as e:
            session.rollback()
            error_msg = f"Error creating horse: {str(e)}"
            self.logger.error(error_msg)
            return False, error_msg, None
        finally:
            session.close()

    def update_horse(
        self, horse_id: int, horse_data: dict, current_user: str
    ) -> Tuple[bool, str]:
        """
        Update an existing horse record

        Args:
            horse_id: ID of horse to update
            horse_data: Dictionary containing updated horse information
            current_user: Current logged-in user ID

        Returns:
            Tuple of (success, message)
        """
        session = db_manager.get_session()
        try:
            horse = session.query(Horse).filter(Horse.horse_id == horse_id).first()
            if not horse:
                return False, f"Horse with ID {horse_id} not found"

            # Validate required fields
            if not horse_data.get("horse_name", "").strip():
                return False, "Horse name is required"

            # Update fields (species_code removed)
            horse.horse_name = horse_data["horse_name"].strip()
            horse.account_number = horse_data.get("account_number", "").strip()
            horse.breed = horse_data.get("breed", "").strip()
            horse.color = horse_data.get("color", "").strip()
            horse.sex = horse_data.get("sex")
            horse.date_of_birth = self._parse_date(horse_data.get("date_of_birth"))
            horse.registration_number = horse_data.get(
                "registration_number", ""
            ).strip()
            horse.microchip_id = horse_data.get("microchip_id", "").strip()
            horse.tattoo = horse_data.get("tattoo", "").strip()
            horse.brand = horse_data.get("brand", "").strip()
            horse.band_tag_number = horse_data.get("band_tag_number", "").strip()
            horse.current_location_id = horse_data.get("current_location_id")
            horse.modified_by = current_user
            horse.modified_date = datetime.utcnow()

            session.commit()

            self.logger.info(
                f"Updated horse: {horse.horse_name} (ID: {horse.horse_id})"
            )
            return True, "Horse updated successfully"

        except Exception as e:
            session.rollback()
            error_msg = f"Error updating horse: {str(e)}"
            self.logger.error(error_msg)
            return False, error_msg
        finally:
            session.close()

    def get_horse_by_id(self, horse_id: int) -> Optional[Horse]:
        """Get horse by ID"""
        session = db_manager.get_session()
        try:
            horse = session.query(Horse).filter(Horse.horse_id == horse_id).first()
            if horse:
                # Load location relationship (species relationship removed)
                _ = horse.location  # Load location relationship
            return horse
        except Exception as e:
            self.logger.error(f"Error getting horse by ID {horse_id}: {str(e)}")
            return None
        finally:
            session.close()

    def search_horses(
        self, search_term: str = "", active_only: bool = True
    ) -> List[Horse]:
        """
        Search horses by name or account number

        Args:
            search_term: Search term to match against horse name or account number
            active_only: If True, only return active horses

        Returns:
            List of matching horses
        """
        session = db_manager.get_session()
        try:
            query = session.query(Horse)

            if active_only:
                query = query.filter(Horse.is_active == True)

            if search_term:
                search_pattern = f"%{search_term}%"
                query = query.filter(
                    or_(
                        Horse.horse_name.like(search_pattern),
                        Horse.account_number.like(search_pattern),
                    )
                )

            horses = query.order_by(Horse.horse_name).all()

            # Load location relationship for all horses (species removed)
            for horse in horses:
                _ = horse.location

            return horses
        except Exception as e:
            self.logger.error(f"Error searching horses: {str(e)}")
            return []
        finally:
            session.close()

    def get_locations_list(self) -> List[Location]:
        """Get list of all active locations"""
        session = db_manager.get_session()
        try:
            return (
                session.query(Location)
                .filter(Location.is_active == True)
                .order_by(Location.location_name)
                .all()
            )
        except Exception as e:
            self.logger.error(f"Error getting locations list: {str(e)}")
            return []
        finally:
            session.close()

    def validate_horse_data(self, horse_data: dict) -> Tuple[bool, List[str]]:
        """
        Validate horse data

        Args:
            horse_data: Dictionary containing horse information

        Returns:
            Tuple of (is_valid, list_of_errors)
        """
        errors = []

        # Required field validation
        if not horse_data.get("horse_name", "").strip():
            errors.append("Horse name is required")

        # Length validation
        if len(horse_data.get("horse_name", "")) > 100:
            errors.append("Horse name cannot exceed 100 characters")

        if len(horse_data.get("account_number", "")) > 20:
            errors.append("Account number cannot exceed 20 characters")

        if len(horse_data.get("breed", "")) > 50:
            errors.append("Breed cannot exceed 50 characters")

        # Date validation
        if horse_data.get("date_of_birth"):
            try:
                birth_date = self._parse_date(horse_data["date_of_birth"])
                if birth_date and birth_date > date.today():
                    errors.append("Date of birth cannot be in the future")
            except:
                errors.append("Invalid date of birth format")

        return len(errors) == 0, errors

    def _parse_date(self, date_value) -> Optional[date]:
        """Parse date from various formats"""
        if not date_value:
            return None

        if isinstance(date_value, date):
            return date_value

        if isinstance(date_value, str):
            # Try different date formats
            formats = ["%Y-%m-%d", "%m/%d/%Y", "%m-%d-%Y"]
            for fmt in formats:
                try:
                    return datetime.strptime(date_value, fmt).date()
                except ValueError:
                    continue

        return None

    def delete_horse(self, horse_id: int) -> Tuple[bool, str]:
        """
        Soft delete a horse (mark as inactive)

        Args:
            horse_id: ID of horse to delete

        Returns:
            Tuple of (success, message)
        """
        session = db_manager.get_session()
        try:
            horse = session.query(Horse).filter(Horse.horse_id == horse_id).first()
            if not horse:
                return False, f"Horse with ID {horse_id} not found"

            horse.is_active = False
            horse.modified_date = datetime.utcnow()
            session.commit()

            self.logger.info(
                f"Deactivated horse: {horse.horse_name} (ID: {horse.horse_id})"
            )
            return True, "Horse deactivated successfully"

        except Exception as e:
            session.rollback()
            error_msg = f"Error deactivating horse: {str(e)}"
            self.logger.error(error_msg)
            return False, error_msg
        finally:
            session.close()

================================================================================
END OF controllers/horse_controller.py
================================================================================


================================================================================
FILE 13/20: views/__init__.py
================================================================================

# views/__init__.py

"""Views package for EDSI application"""

================================================================================
END OF views/__init__.py
================================================================================


================================================================================
FILE 14/20: views/base_view.py
================================================================================

# views/base_view.py

"""
EDSI Veterinary Management System - Base View
Version: 1.0.1
Purpose: Base class for all application windows with improved widget initialization.
Last Updated: May 12, 2025
Author: Claude Assistant

Changelog:
- v1.0.1 (2025-05-12): Fixed central widget initialization
  - Ensured central_widget is created properly in __init__
  - Added explicit central widget creation for PyQt6 compatibility
  - Fixed attribute name consistency across all views
- v1.0.0 (2025-05-12): Initial implementation
  - Created base class for all application windows
  - Implemented common UI elements and styling
  - Added message box helpers and utility methods
"""

from PyQt6.QtWidgets import (
    QMainWindow,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QLabel,
    QPushButton,
    QMessageBox,
    QFrame,
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont, QPalette, QColor
from config.app_config import AppConfig
import logging


class BaseView(QMainWindow):
    """Base class for all application windows"""

    # Signal emitted when window is closing
    closing = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self.logger = logging.getLogger(self.__class__.__name__)

        # Create central widget first
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        self.setup_ui()
        self.apply_styling()

    def setup_ui(self):
        """Setup basic UI structure - to be overridden by subclasses"""
        # Subclasses should override this method to set their own layouts
        pass

    def apply_styling(self):
        """Apply consistent styling to the window"""
        # Set window properties
        self.setMinimumSize(AppConfig.MIN_WINDOW_WIDTH, AppConfig.MIN_WINDOW_HEIGHT)

        # Set background color
        self.setStyleSheet(
            f"""
            QMainWindow {{
                background-color: {AppConfig.BACKGROUND_COLOR};
            }}
            QFrame {{
                background-color: {AppConfig.SURFACE_COLOR};
                border: 1px solid #dee2e6;
                border-radius: 8px;
                margin: 5px;
            }}
            QLabel {{
                color: {AppConfig.TEXT_COLOR};
                font-family: {AppConfig.DEFAULT_FONT_FAMILY};
                font-size: {AppConfig.DEFAULT_FONT_SIZE}pt;
            }}
            QPushButton {{
                background-color: {AppConfig.PRIMARY_COLOR};
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-family: {AppConfig.DEFAULT_FONT_FAMILY};
                font-size: {AppConfig.DEFAULT_FONT_SIZE}pt;
            }}
            QPushButton:hover {{
                background-color: #106ebe;
            }}
            QPushButton:pressed {{
                background-color: #005a9e;
            }}
            QPushButton:disabled {{
                background-color: #6c757d;
            }}
        """
        )

    def set_title(self, title):
        """Set window title with application name"""
        self.setWindowTitle(f"{AppConfig.APP_NAME} - {title}")

    def show_error(self, title, message):
        """Show error message box"""
        QMessageBox.critical(self, title, message)

    def show_warning(self, title, message):
        """Show warning message box"""
        QMessageBox.warning(self, title, message)

    def show_info(self, title, message):
        """Show information message box"""
        QMessageBox.information(self, title, message)

    def show_question(self, title, message):
        """Show question dialog"""
        reply = QMessageBox.question(
            self,
            title,
            message,
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No,
        )
        return reply == QMessageBox.StandardButton.Yes

    def center_on_screen(self):
        """Center the window on the display"""
        screen = self.screen().availableGeometry()
        size = self.geometry()
        self.move(
            (screen.width() - size.width()) // 2, (screen.height() - size.height()) // 2
        )

    def closeEvent(self, event):
        """Handle window close event"""
        self.closing.emit()
        super().closeEvent(event)

================================================================================
END OF views/base_view.py
================================================================================


================================================================================
FILE 15/20: views/auth/splash_screen.py
================================================================================

# views/auth/splash_screen.py

from PyQt6.QtWidgets import QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QFrame
from PyQt6.QtCore import Qt, QTimer, pyqtSignal
from PyQt6.QtGui import QFont, QPixmap
from views.base_view import BaseView
from config.app_config import AppConfig


class SplashScreen(BaseView):
    """EDSI splash screen that appears on startup"""

    # Signal emitted when user presses any key or clicks
    splash_closed = pyqtSignal()

    def __init__(self):
        super().__init__()
        self.setup_splash_ui()
        self.setup_timer()

    def setup_splash_ui(self):
        """Setup the splash screen UI"""
        self.set_title("EDSI Splash Screen")
        self.resize(600, 400)

        # Center the window on screen
        self.center_on_screen()

        # Create splash layout directly

        # Main splash layout
        splash_layout = QVBoxLayout(self.central_widget)
        splash_layout.setContentsMargins(20, 20, 20, 20)
        splash_layout.setSpacing(20)
        splash_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)

        # Create main content frame
        content_frame = QFrame()
        content_frame.setFrameStyle(QFrame.Shape.StyledPanel | QFrame.Shadow.Raised)
        content_frame.setFixedSize(500, 300)
        content_frame.setStyleSheet(
            f"""
            QFrame {{
                background-color: {AppConfig.SURFACE_COLOR};
                border: 2px solid {AppConfig.PRIMARY_COLOR};
                border-radius: 12px;
            }}
        """
        )

        content_layout = QVBoxLayout(content_frame)
        content_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        content_layout.setSpacing(20)
        content_layout.setContentsMargins(30, 30, 30, 30)

        # Application title
        title_label = QLabel("EDSI")
        title_font = QFont(AppConfig.DEFAULT_FONT_FAMILY, 36, QFont.Weight.Bold)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet(f"color: {AppConfig.PRIMARY_COLOR};")
        content_layout.addWidget(title_label)

        # Subtitle
        subtitle_label = QLabel("Veterinary Management System")
        subtitle_font = QFont(AppConfig.DEFAULT_FONT_FAMILY, 18)
        subtitle_label.setFont(subtitle_font)
        subtitle_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        subtitle_label.setStyleSheet(f"color: {AppConfig.TEXT_COLOR};")
        content_layout.addWidget(subtitle_label)

        # Version info
        version_label = QLabel(f"Version {AppConfig.APP_VERSION}")
        version_font = QFont(AppConfig.DEFAULT_FONT_FAMILY, 12)
        version_label.setFont(version_font)
        version_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        version_label.setStyleSheet(f"color: {AppConfig.TEXT_SECONDARY};")
        content_layout.addWidget(version_label)

        # Add some stretch
        content_layout.addStretch()

        # Press any key message
        instruction_label = QLabel("Press any key to continue...")
        instruction_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        instruction_label.setStyleSheet(
            f"""
            color: {AppConfig.TEXT_SECONDARY};
            font-style: italic;
            font-size: {AppConfig.DEFAULT_FONT_SIZE}pt;
        """
        )
        content_layout.addWidget(instruction_label)

        # Add content frame to splash layout
        splash_layout.addWidget(content_frame)

        # Make window modal
        self.setWindowModality(Qt.WindowModality.ApplicationModal)

    def center_on_screen(self):
        """Center the splash screen on the display"""
        screen = self.screen().availableGeometry()
        size = self.geometry()
        self.move(
            (screen.width() - size.width()) // 2, (screen.height() - size.height()) // 2
        )

    def setup_timer(self):
        """Setup auto-advance timer (optional)"""
        # Optional: Auto-advance after 3 seconds
        self.auto_advance_timer = QTimer()
        self.auto_advance_timer.timeout.connect(self.close_splash)
        self.auto_advance_timer.setSingleShot(True)
        self.auto_advance_timer.start(3000)  # 3 seconds

    def keyPressEvent(self, event):
        """Handle any key press"""
        self.close_splash()

    def mousePressEvent(self, event):
        """Handle mouse click"""
        self.close_splash()

    def close_splash(self):
        """Close splash screen and emit signal"""
        if hasattr(self, "auto_advance_timer"):
            self.auto_advance_timer.stop()
        self.splash_closed.emit()
        self.close()

================================================================================
END OF views/auth/splash_screen.py
================================================================================


================================================================================
FILE 16/20: views/auth/login_screen.py
================================================================================

# views/auth/login_screen.py

from PyQt6.QtWidgets import (
    QVBoxLayout,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QPushButton,
    QFrame,
    QSpacerItem,
    QSizePolicy,
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont
from views.base_view import BaseView
from config.app_config import AppConfig
import logging


class LoginScreen(BaseView):
    """User ID entry screen for authentication"""

    # Signal emitted when login is successful
    login_successful = pyqtSignal(str)  # Passes user_id

    # Signal emitted when user wants to exit
    exit_requested = pyqtSignal()

    def __init__(self):
        super().__init__()
        self.setup_login_ui()
        self.logger = logging.getLogger(self.__class__.__name__)

    def setup_login_ui(self):
        """Setup the login screen UI"""
        self.set_title("Enter User ID")
        self.resize(400, 300)
        self.center_on_screen()

        # Create login layout directly

        # Main login layout
        login_layout = QVBoxLayout(self.central_widget)
        login_layout.setContentsMargins(20, 20, 20, 20)
        login_layout.setSpacing(20)

        # Create login form frame
        form_frame = QFrame()
        form_frame.setFrameStyle(QFrame.Shape.StyledPanel | QFrame.Shadow.Raised)
        form_frame.setStyleSheet(
            f"""
            QFrame {{
                background-color: {AppConfig.SURFACE_COLOR};
                border: 1px solid {AppConfig.PRIMARY_COLOR};
                border-radius: 8px;
                padding: 20px;
            }}
        """
        )

        form_layout = QVBoxLayout(form_frame)
        form_layout.setSpacing(15)

        # Title
        title_label = QLabel("EDSI Login")
        title_font = QFont(AppConfig.DEFAULT_FONT_FAMILY, 20, QFont.Weight.Bold)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet(f"color: {AppConfig.PRIMARY_COLOR};")
        form_layout.addWidget(title_label)

        # Add some space
        spacer1 = QSpacerItem(
            20, 20, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed
        )
        form_layout.addItem(spacer1)

        # User ID label
        user_id_label = QLabel("User ID:")
        user_id_label.setStyleSheet(
            f"""
            font-size: {AppConfig.DEFAULT_FONT_SIZE + 2}pt;
            font-weight: bold;
            color: {AppConfig.TEXT_COLOR};
        """
        )
        form_layout.addWidget(user_id_label)

        # User ID input
        self.user_id_input = QLineEdit()
        self.user_id_input.setFixedHeight(40)
        self.user_id_input.setStyleSheet(
            f"""
            QLineEdit {{
                border: 2px solid #ced4da;
                border-radius: 4px;
                padding: 8px;
                font-size: {AppConfig.DEFAULT_FONT_SIZE + 2}pt;
                background-color: white;
            }}
            QLineEdit:focus {{
                border-color: {AppConfig.PRIMARY_COLOR};
            }}
        """
        )
        self.user_id_input.returnPressed.connect(self.handle_login)
        form_layout.addWidget(self.user_id_input)

        # Add some space
        spacer2 = QSpacerItem(
            20, 20, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed
        )
        form_layout.addItem(spacer2)

        # Button layout
        button_layout = QHBoxLayout()

        self.login_button = QPushButton("Enter")
        self.login_button.clicked.connect(self.handle_login)
        self.login_button.setMinimumHeight(40)
        self.login_button.setMinimumWidth(100)

        self.exit_button = QPushButton("Exit")
        self.exit_button.clicked.connect(self.handle_exit)
        self.exit_button.setMinimumHeight(40)
        self.exit_button.setMinimumWidth(100)
        self.exit_button.setStyleSheet(
            f"""
            QPushButton {{
                background-color: {AppConfig.SECONDARY_COLOR};
            }}
            QPushButton:hover {{
                background-color: #5a6268;
            }}
        """
        )

        button_layout.addStretch()
        button_layout.addWidget(self.login_button)
        button_layout.addWidget(self.exit_button)
        button_layout.addStretch()

        form_layout.addLayout(button_layout)

        # Instructions
        instruction_label = QLabel("Enter your User ID and press Enter")
        instruction_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        instruction_label.setStyleSheet(
            f"""
            color: {AppConfig.TEXT_SECONDARY};
            font-style: italic;
            font-size: {AppConfig.SMALL_FONT_SIZE + 1}pt;
        """
        )
        form_layout.addWidget(instruction_label)

        # Add the form frame to main layout
        login_layout.addStretch()
        login_layout.addWidget(form_frame)
        login_layout.addStretch()

        # Set focus to input field
        self.user_id_input.setFocus()

        # Make window modal
        self.setWindowModality(Qt.WindowModality.ApplicationModal)

    def center_on_screen(self):
        """Center the login screen on the display"""
        screen = self.screen().availableGeometry()
        size = self.geometry()
        self.move(
            (screen.width() - size.width()) // 2, (screen.height() - size.height()) // 2
        )

    def handle_login(self):
        """Handle login attempt"""
        user_id = self.user_id_input.text().strip().upper()

        if not user_id:
            self.show_error("Error", "Please enter a User ID")
            self.user_id_input.setFocus()
            return

        # Validate user ID (basic check - should be enhanced with actual authentication)
        if self.validate_user_id(user_id):
            self.logger.info(f"User '{user_id}' logged in successfully")
            self.login_successful.emit(user_id)
            self.close()
        else:
            self.show_error("Invalid User ID", f"User ID '{user_id}' not found")
            self.user_id_input.clear()
            self.user_id_input.setFocus()

    def validate_user_id(self, user_id):
        """Validate user ID against database"""
        # TODO: Implement actual database validation
        # For now, accept any non-empty user ID
        # In production, this should check against the users table
        from config.database_config import db_manager
        from models import User

        try:
            session = db_manager.get_session()
            user = session.query(User).filter(User.user_id == user_id).first()
            session.close()
            return user is not None and user.is_active
        except Exception as e:
            self.logger.error(f"Error validating user: {e}")
            return False

    def handle_exit(self):
        """Handle exit button click"""
        self.exit_requested.emit()
        self.close()

    def keyPressEvent(self, event):
        """Handle key press events"""
        # Allow ESC to exit
        if event.key() == Qt.Key.Key_Escape:
            self.handle_exit()
        else:
            super().keyPressEvent(event)

================================================================================
END OF views/auth/login_screen.py
================================================================================


================================================================================
FILE 17/20: views/main_menu.py
================================================================================

# views/main_menu.py

"""
EDSI Veterinary Management System - Main Menu
Version: 1.0.1
Purpose: Modern unified main menu with consolidated management screens.
Last Updated: May 12, 2025
Author: Claude Assistant

Changelog:
- v1.0.1 (2025-05-12): Updated for unified management approach
  - Replaced separate horse operations (Add, Edit, Delete) with single "Horse Management"
  - Removed horse_review_update_selected, add_new_horse_selected, delete_horse_selected signals
  - Added horse_management_selected signal for unified interface
  - Updated menu options to reflect modern management screens
  - Simplified menu structure for better user experience
- v1.0.0 (2025-05-12): Initial implementation
  - Created complete main menu matching COBOL layout
  - Implemented all menu option signals
  - Added keyboard navigation support
  - Included proper styling and layout
"""

from PyQt6.QtWidgets import (
    QVBoxLayout,
    QHBoxLayout,
    QGridLayout,
    QLabel,
    QPushButton,
    QFrame,
    QSpacerItem,
    QSizePolicy,
    QGroupBox,
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont
from views.base_view import BaseView
from config.app_config import AppConfig
import logging


class MainMenu(BaseView):
    """Primary menu screen with unified management approach"""

    # Signals for menu selections
    horse_management_selected = pyqtSignal()  # Option 1 - Unified horse operations
    table_maintenance_selected = pyqtSignal()  # Option 2
    print_reports_selected = pyqtSignal()  # Option 3
    owners_ar_selected = pyqtSignal()  # Option 4
    system_utilities_selected = pyqtSignal()  # Option 5
    mass_update_selected = pyqtSignal()  # Option 6
    logoff_exit_selected = pyqtSignal()  # Option 9
    logoff_no_exit_selected = pyqtSignal()  # Option X

    def __init__(self, current_user=None):
        self.current_user = current_user or "Unknown"
        super().__init__()
        self.setup_main_menu_ui()
        self.logger = logging.getLogger(self.__class__.__name__)

    def setup_main_menu_ui(self):
        """Setup the main menu UI"""
        self.set_title("Primary Menu")
        self.resize(700, 600)
        self.center_on_screen()

        # Header section
        self.setup_header()

        # Main menu options
        self.setup_menu_options()

        # Footer section
        self.setup_footer()

    def setup_header(self):
        """Setup header with title and user info"""
        header_frame = QFrame()
        header_layout = QVBoxLayout(header_frame)

        # Main title
        title_label = QLabel("EDSI Primary Menu")
        title_font = QFont(AppConfig.DEFAULT_FONT_FAMILY, 24, QFont.Weight.Bold)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet(
            f"""
            color: {AppConfig.PRIMARY_COLOR};
            padding: 10px;
        """
        )

        # User info
        user_info_label = QLabel(f"Current User: {self.current_user}")
        user_info_label.setAlignment(Qt.AlignmentFlag.AlignRight)
        user_info_label.setStyleSheet(
            f"""
            color: {AppConfig.TEXT_SECONDARY};
            font-size: {AppConfig.DEFAULT_FONT_SIZE}pt;
            padding: 5px;
        """
        )

        header_layout.addWidget(title_label)
        header_layout.addWidget(user_info_label)

        # Set up the main window layout instead of using the base view methods
        if not hasattr(self, "main_layout"):
            self.main_layout = QVBoxLayout(self.central_widget)
            self.main_layout.setContentsMargins(20, 20, 20, 20)

        self.main_layout.addWidget(header_frame)

    def setup_menu_options(self):
        """Setup main menu options grid"""
        # Create menu group box
        menu_group = QGroupBox("Select an option:")
        menu_group.setStyleSheet(
            f"""
            QGroupBox {{
                font-size: {AppConfig.DEFAULT_FONT_SIZE + 2}pt;
                font-weight: bold;
                color: {AppConfig.TEXT_COLOR};
                padding-top: 15px;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
            }}
        """
        )

        # Create grid layout for menu options
        menu_layout = QGridLayout(menu_group)
        menu_layout.setSpacing(15)
        menu_layout.setContentsMargins(20, 20, 20, 20)

        # Define menu options (number, text, signal) - Updated for unified approach
        menu_options = [
            ("1.", "Horse Management", self.horse_management_selected),
            ("2.", "Table Maintenance", self.table_maintenance_selected),
            ("3.", "Print Reports & Billing", self.print_reports_selected),
            ("4.", "Owners A/R", self.owners_ar_selected),
            ("5.", "System Utilities", self.system_utilities_selected),
            ("6.", "Mass Update", self.mass_update_selected),
            ("9.", "Logoff & Exit", self.logoff_exit_selected),
            ("X.", "Logoff, No Exit", self.logoff_no_exit_selected),
        ]

        # Create buttons for each option
        self.menu_buttons = {}
        row = 0
        col = 0
        max_cols = 2

        for number, text, signal in menu_options:
            button = self.create_menu_button(number, text, signal)
            menu_layout.addWidget(button, row, col)
            self.menu_buttons[number] = button

            col += 1
            if col >= max_cols:
                col = 0
                row += 1

        # Add the menu group to content area
        self.main_layout.addWidget(menu_group, 1)  # Take up most space

    def create_menu_button(self, number, text, signal):
        """Create a styled menu button"""
        button = QPushButton(f"{number} {text}")
        button.setMinimumHeight(50)
        button.setMinimumWidth(280)

        # Special styling for exit options
        if number in ["9.", "X."]:
            button.setStyleSheet(
                f"""
                QPushButton {{
                    background-color: {AppConfig.SECONDARY_COLOR};
                    color: white;
                    border: none;
                    padding: 10px;
                    text-align: left;
                    font-size: {AppConfig.DEFAULT_FONT_SIZE + 1}pt;
                    border-radius: 6px;
                }}
                QPushButton:hover {{
                    background-color: #5a6268;
                }}
                QPushButton:pressed {{
                    background-color: #495057;
                }}
            """
            )
        else:
            button.setStyleSheet(
                f"""
                QPushButton {{
                    background-color: {AppConfig.PRIMARY_COLOR};
                    color: white;
                    border: none;
                    padding: 10px;
                    text-align: left;
                    font-size: {AppConfig.DEFAULT_FONT_SIZE + 1}pt;
                    border-radius: 6px;
                }}
                QPushButton:hover {{
                    background-color: #106ebe;
                }}
                QPushButton:pressed {{
                    background-color: #005a9e;
                }}
            """
            )

        button.clicked.connect(lambda checked, s=signal: s.emit())
        return button

    def setup_footer(self):
        """Setup footer with instructions"""
        footer_frame = QFrame()
        footer_layout = QHBoxLayout(footer_frame)

        instruction_label = QLabel(
            "Select an option by clicking or pressing the corresponding number/letter"
        )
        instruction_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        instruction_label.setStyleSheet(
            f"""
            color: {AppConfig.TEXT_SECONDARY};
            font-style: italic;
            font-size: {AppConfig.SMALL_FONT_SIZE + 1}pt;
            padding: 10px;
        """
        )

        footer_layout.addWidget(instruction_label)
        self.main_layout.addWidget(footer_frame)

    def center_on_screen(self):
        """Center the main menu on the display"""
        screen = self.screen().availableGeometry()
        size = self.geometry()
        self.move(
            (screen.width() - size.width()) // 2, (screen.height() - size.height()) // 2
        )

    def keyPressEvent(self, event):
        """Handle keyboard shortcuts for menu options"""
        key = event.text().upper()

        # Map keys to signals - Updated for unified approach
        key_mappings = {
            "1": self.horse_management_selected,
            "2": self.table_maintenance_selected,
            "3": self.print_reports_selected,
            "4": self.owners_ar_selected,
            "5": self.system_utilities_selected,
            "6": self.mass_update_selected,
            "9": self.logoff_exit_selected,
            "X": self.logoff_no_exit_selected,
        }

        if key in key_mappings:
            self.logger.info(f"Menu option {key} selected via keyboard")
            key_mappings[key].emit()
        else:
            super().keyPressEvent(event)

================================================================================
END OF views/main_menu.py
================================================================================


================================================================================
FILE 18/20: views/horse/__init__.py
================================================================================

ERROR: File not found: views/horse/__init__.py

================================================================================
END OF views/horse/__init__.py
================================================================================


================================================================================
FILE 19/20: views/horse/horse_unified_management.py
================================================================================

# views/horse/horse_unified_management.py

"""
EDSI Veterinary Management System - Unified Horse Management Screen

Unified interface for all horse management operations (CRUD, search, filter).
Version: 1.0.3
Last Updated: May 12, 2025

Changelog:
- v1.0.3 (2025-05-12): Added exit functionality and fixed missing signal
  - Added exit_requested signal for proper navigation flow
  - Added Exit button to action toolbar for returning to main menu
  - Added exit_application() method with unsaved changes check
  - Added Escape key handler for quick exit
  - Fixed connection error in main.py integration
- v1.0.2 (2025-05-12): Fixed date handling for PyQt6 compatibility
  - Updated save_changes() to properly convert QDate to Python date
  - Handled both toPython() method and manual conversion
  - Improved error handling for date operations
- v1.0.1 (2025-05-12): Fixed PyQt6 compatibility issues
  - Fixed date conversion in save_changes() method for PyQt6
  - Removed duplicate central widget creation
  - Improved error handling for date field operations
- v1.0.0 (2025-05-12): Initial implementation
  - Created unified horse management with split-pane layout
  - Implemented horse list with search and filtering
  - Added tabbed horse details with inline editing
  - Combined Add/Edit/Delete operations in single interface
  - Added modern UI with Material Design elements
  - Implemented auto-save functionality with visual feedback
  - Added bulk operations for multiple horse selection
  - Integrated photo placeholder for future horse images
"""

from PyQt6.QtWidgets import (
    QVBoxLayout,
    QHBoxLayout,
    QGridLayout,
    QLabel,
    QLineEdit,
    QComboBox,
    QDateEdit,
    QPushButton,
    QFrame,
    QGroupBox,
    QListWidget,
    QListWidgetItem,
    QTabWidget,
    QWidget,
    QSplitter,
    QCheckBox,
    QSpacerItem,
    QSizePolicy,
    QScrollArea,
    QMessageBox,
    QProgressBar,
    QStatusBar,
)
from PyQt6.QtCore import Qt, pyqtSignal, QDate, QTimer, QPropertyAnimation, QEasingCurve
from PyQt6.QtGui import QFont, QPalette, QPixmap, QPaintEvent, QPainter, QColor
from views.base_view import BaseView
from config.app_config import AppConfig
from controllers.horse_controller import HorseController
import logging
from datetime import datetime, date


class HorseListWidget(QListWidget):
    """Custom list widget with improved styling for horses"""

    def __init__(self):
        super().__init__()
        self.setStyleSheet(
            """
            QListWidget {
                border: none;
                background-color: white;
                alternate-background-color: #f8f9fa;
                outline: none;
            }
            QListWidget::item {
                padding: 12px;
                border-bottom: 1px solid #e9ecef;
                min-height: 60px;
            }
            QListWidget::item:selected {
                background-color: #e3f2fd;
                border-left: 4px solid #2196f3;
            }
            QListWidget::item:hover {
                background-color: #f5f5f5;
            }
        """
        )
        self.setAlternatingRowColors(True)


class HorseUnifiedManagement(BaseView):
    """Unified horse management interface with all CRUD operations"""

    # Signals
    horse_selection_changed = pyqtSignal(int)  # Emitted when horse selection changes
    unsaved_changes = pyqtSignal(bool)  # Emitted when there are unsaved changes
    exit_requested = pyqtSignal()  # Emitted when user wants to exit

    def __init__(self, current_user=None):
        self.current_user = current_user or "ADMIN"
        self.controller = HorseController()
        self.horses_list = []
        self.current_horse = None
        self.has_changes = False
        self.search_timer = QTimer()
        self.search_timer.setSingleShot(True)
        self.search_timer.timeout.connect(self.perform_search)

        super().__init__()
        self.setup_ui()
        self.load_initial_data()

        self.logger = logging.getLogger(self.__class__.__name__)

    def setup_ui(self):
        """Setup the unified horse management UI"""
        self.set_title("Horse Management")
        self.resize(1200, 800)
        self.center_on_screen()

        # Main layout
        main_layout = QVBoxLayout(self.central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)

        # Header
        self.setup_header(main_layout)

        # Action toolbar
        self.setup_action_toolbar(main_layout)

        # Main content area
        self.setup_main_content(main_layout)

        # Status bar
        self.setup_status_bar(main_layout)

        # Setup connections
        self.setup_connections()

    def setup_header(self, parent_layout):
        """Setup header with breadcrumbs and user info"""
        header_frame = QFrame()
        header_frame.setStyleSheet(
            f"""
            QFrame {{
                background-color: {AppConfig.PRIMARY_COLOR};
                color: white;
                padding: 0;
            }}
        """
        )
        header_layout = QHBoxLayout(header_frame)
        header_layout.setContentsMargins(20, 12, 20, 12)

        # Left side - Title and breadcrumb
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        left_layout.setSpacing(2)
        left_layout.setContentsMargins(0, 0, 0, 0)

        title_label = QLabel("Horse Management")
        title_label.setFont(QFont(AppConfig.DEFAULT_FONT_FAMILY, 18, QFont.Weight.Bold))
        left_layout.addWidget(title_label)

        breadcrumb_label = QLabel("Main Menu > Horse Management")
        breadcrumb_label.setStyleSheet(
            "color: rgba(255, 255, 255, 0.8); font-size: 12px;"
        )
        left_layout.addWidget(breadcrumb_label)

        # Right side - User info and actions
        right_layout = QHBoxLayout()
        right_layout.addWidget(QLabel(f"User: {self.current_user}"))

        # Action buttons
        self.refresh_btn = QPushButton("🔄")
        self.refresh_btn.setToolTip("Refresh (F5)")
        self.help_btn = QPushButton("❓")
        self.help_btn.setToolTip("Help (F1)")

        for btn in [self.refresh_btn, self.help_btn]:
            btn.setStyleSheet(
                """
                QPushButton {
                    background: rgba(255, 255, 255, 0.1);
                    border: none;
                    border-radius: 4px;
                    padding: 6px;
                    color: white;
                }
                QPushButton:hover {
                    background: rgba(255, 255, 255, 0.2);
                }
            """
            )

        right_layout.addWidget(self.refresh_btn)
        right_layout.addWidget(self.help_btn)

        header_layout.addWidget(left_widget)
        header_layout.addStretch()
        header_layout.addLayout(right_layout)

        parent_layout.addWidget(header_frame)

    def setup_action_toolbar(self, parent_layout):
        """Setup action toolbar with buttons and search"""
        toolbar_frame = QFrame()
        toolbar_frame.setStyleSheet(
            """
            QFrame {
                background-color: white;
                border-bottom: 1px solid #e0e0e0;
                padding: 0;
            }
        """
        )
        toolbar_layout = QHBoxLayout(toolbar_frame)
        toolbar_layout.setContentsMargins(20, 16, 20, 16)

        # Action buttons
        action_buttons_layout = QHBoxLayout()

        self.add_horse_btn = QPushButton("➕ Add Horse")
        self.edit_horse_btn = QPushButton("✏️ Edit Selected")
        self.delete_horse_btn = QPushButton("🗑️ Delete Selected")
        self.exit_btn = QPushButton("✖️ Exit")

        for btn, color in [
            (self.add_horse_btn, AppConfig.PRIMARY_COLOR),
            (self.edit_horse_btn, AppConfig.SUCCESS_COLOR),
            (self.delete_horse_btn, AppConfig.DANGER_COLOR),
            (self.exit_btn, AppConfig.SECONDARY_COLOR),
        ]:
            btn.setStyleSheet(
                f"""
                QPushButton {{
                    background-color: {color};
                    color: white;
                    border: none;
                    border-radius: 6px;
                    padding: 10px 16px;
                    font-weight: 500;
                }}
                QPushButton:hover {{
                    background-color: {color}dd;
                }}
                QPushButton:disabled {{
                    background-color: #6c757d;
                }}
            """
            )
            action_buttons_layout.addWidget(btn)

        # Initially disable edit and delete
        self.edit_horse_btn.setEnabled(False)
        self.delete_horse_btn.setEnabled(False)

        # Filter toggles
        filter_frame = QFrame()
        filter_frame.setStyleSheet(
            """
            QFrame {
                background-color: #f8f9fa;
                border-radius: 6px;
                padding: 2px;
            }
        """
        )
        filter_layout = QHBoxLayout(filter_frame)
        filter_layout.setContentsMargins(0, 0, 0, 0)

        self.active_only_btn = QPushButton("Active Only")
        self.all_horses_btn = QPushButton("All Horses")

        for btn in [self.active_only_btn, self.all_horses_btn]:
            btn.setCheckable(True)
            btn.setStyleSheet(
                """
                QPushButton {
                    border: none;
                    border-radius: 4px;
                    padding: 8px 16px;
                    background: transparent;
                }
                QPushButton:checked {
                    background-color: white;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                }
            """
            )

        self.active_only_btn.setChecked(True)
        filter_layout.addWidget(self.active_only_btn)
        filter_layout.addWidget(self.all_horses_btn)

        # Search box
        search_frame = QFrame()
        search_frame.setStyleSheet(
            """
            QFrame {
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 6px;
                padding: 0;
            }
        """
        )
        search_layout = QHBoxLayout(search_frame)
        search_layout.setContentsMargins(12, 8, 12, 8)

        search_layout.addWidget(QLabel("🔍"))
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Search horses...")
        self.search_input.setStyleSheet(
            """
            QLineEdit {
                border: none;
                font-size: 14px;
            }
        """
        )
        search_layout.addWidget(self.search_input)
        search_frame.setFixedWidth(250)

        # Add to toolbar
        toolbar_layout.addLayout(action_buttons_layout)
        toolbar_layout.addStretch()
        toolbar_layout.addWidget(filter_frame)
        toolbar_layout.addWidget(search_frame)

        parent_layout.addWidget(toolbar_frame)

    def setup_main_content(self, parent_layout):
        """Setup main content area with split pane"""
        # Create splitter
        self.splitter = QSplitter(Qt.Orientation.Horizontal)
        self.splitter.setHandleWidth(1)
        self.splitter.setStyleSheet(
            """
            QSplitter::handle {
                background-color: #e0e0e0;
            }
        """
        )

        # Left panel - Horse list
        self.setup_horse_list_panel()

        # Right panel - Horse details
        self.setup_horse_details_panel()

        # Set splitter sizes (30% for list, 70% for details)
        self.splitter.setSizes([360, 840])
        self.splitter.setCollapsible(0, False)
        self.splitter.setCollapsible(1, False)

        parent_layout.addWidget(self.splitter)

    def setup_horse_list_panel(self):
        """Setup left panel with horse list"""
        list_widget = QWidget()
        list_layout = QVBoxLayout(list_widget)
        list_layout.setContentsMargins(0, 0, 0, 0)
        list_layout.setSpacing(0)

        # List header
        header_frame = QFrame()
        header_frame.setStyleSheet(
            """
            QFrame {
                background-color: #f8f9fa;
                border-bottom: 1px solid #e0e0e0;
                padding: 0;
            }
        """
        )
        header_layout = QHBoxLayout(header_frame)
        header_layout.setContentsMargins(16, 16, 16, 16)

        horses_label = QLabel("Horses")
        horses_label.setFont(
            QFont(AppConfig.DEFAULT_FONT_FAMILY, 14, QFont.Weight.Bold)
        )

        self.horse_count_label = QLabel("0 total")
        self.horse_count_label.setStyleSheet("color: #666; font-size: 12px;")

        header_layout.addWidget(horses_label)
        header_layout.addStretch()
        header_layout.addWidget(self.horse_count_label)

        # Horse list
        self.horse_list = HorseListWidget()
        self.horse_list.setMinimumWidth(300)

        list_layout.addWidget(header_frame)
        list_layout.addWidget(self.horse_list)

        self.splitter.addWidget(list_widget)

    def setup_horse_details_panel(self):
        """Setup right panel with horse details"""
        self.details_widget = QWidget()
        self.details_layout = QVBoxLayout(self.details_widget)
        self.details_layout.setContentsMargins(20, 20, 20, 20)
        self.details_layout.setSpacing(20)

        # Empty state
        self.setup_empty_state()

        # Horse details (hidden initially)
        self.setup_horse_details()

        self.splitter.addWidget(self.details_widget)

    def setup_empty_state(self):
        """Setup empty state when no horse is selected"""
        self.empty_frame = QFrame()
        empty_layout = QVBoxLayout(self.empty_frame)
        empty_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)

        empty_label = QLabel("Select a horse to view details")
        empty_label.setStyleSheet(
            """
            QLabel {
                color: #666;
                font-size: 18px;
                font-weight: 300;
            }
        """
        )
        empty_label.setAlignment(Qt.AlignmentFlag.AlignCenter)

        instruction_label = QLabel("Use the search box to find horses quickly")
        instruction_label.setStyleSheet(
            """
            QLabel {
                color: #999;
                font-size: 14px;
                font-style: italic;
            }
        """
        )
        instruction_label.setAlignment(Qt.AlignmentFlag.AlignCenter)

        empty_layout.addWidget(empty_label)
        empty_layout.addWidget(instruction_label)

        self.details_layout.addWidget(self.empty_frame)

    def setup_horse_details(self):
        """Setup horse details section"""
        self.horse_details_frame = QFrame()
        self.horse_details_frame.hide()
        horse_layout = QVBoxLayout(self.horse_details_frame)
        horse_layout.setSpacing(20)

        # Horse header with photo and basic info
        self.setup_horse_header(horse_layout)

        # Tabs for different sections
        self.setup_horse_tabs(horse_layout)

        # Action buttons
        self.setup_detail_actions(horse_layout)

        self.details_layout.addWidget(self.horse_details_frame)

    def setup_horse_header(self, parent_layout):
        """Setup horse header with photo and basic info"""
        header_frame = QFrame()
        header_frame.setStyleSheet(
            """
            QFrame {
                background-color: #f8f9fa;
                border-radius: 8px;
                padding: 0;
            }
        """
        )
        header_layout = QHBoxLayout(header_frame)
        header_layout.setContentsMargins(20, 20, 20, 20)
        header_layout.setSpacing(20)

        # Horse photo placeholder
        self.horse_photo = QLabel()
        self.horse_photo.setFixedSize(120, 120)
        self.horse_photo.setStyleSheet(
            """
            QLabel {
                background-color: #e0e0e0;
                border-radius: 8px;
                font-size: 48px;
                color: #999;
            }
        """
        )
        self.horse_photo.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.horse_photo.setText("🐎")

        # Basic info
        info_widget = QWidget()
        info_layout = QVBoxLayout(info_widget)
        info_layout.setSpacing(8)

        self.horse_title = QLabel()
        self.horse_title.setFont(
            QFont(AppConfig.DEFAULT_FONT_FAMILY, 24, QFont.Weight.Bold)
        )
        self.horse_title.setStyleSheet(f"color: {AppConfig.TEXT_COLOR};")

        # Info grid
        self.info_frame = QFrame()
        self.info_grid = QGridLayout(self.info_frame)
        self.info_grid.setSpacing(12)

        self.info_labels = {}
        info_items = [
            ("Account", "account"),
            ("Breed", "breed"),
            ("Color", "color"),
            ("Sex", "sex"),
            ("Age", "age"),
            ("Location", "location"),
        ]

        for i, (label_text, key) in enumerate(info_items):
            row, col = i // 2, (i % 2) * 2

            label = QLabel(f"{label_text}:")
            label.setStyleSheet("color: #666; font-weight: 500;")
            value = QLabel()
            value.setStyleSheet("color: #333;")

            self.info_grid.addWidget(label, row, col)
            self.info_grid.addWidget(value, row, col + 1)
            self.info_labels[key] = value

        info_layout.addWidget(self.horse_title)
        info_layout.addWidget(self.info_frame)
        info_layout.addStretch()

        header_layout.addWidget(self.horse_photo)
        header_layout.addWidget(info_widget)

        parent_layout.addWidget(header_frame)

    def setup_horse_tabs(self, parent_layout):
        """Setup tabbed interface for horse details"""
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet(
            """
            QTabWidget::pane {
                border: 1px solid #e0e0e0;
                background-color: white;
                border-radius: 4px;
            }
            QTabBar::tab {
                padding: 12px 20px;
                margin-right: 2px;
                background-color: #f8f9fa;
                border: 1px solid #e0e0e0;
                border-bottom: none;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }
            QTabBar::tab:selected {
                background-color: white;
                color: #0078d4;
                font-weight: 500;
            }
            QTabBar::tab:hover {
                background-color: #e9ecef;
            }
        """
        )

        # Basic Info tab
        self.setup_basic_info_tab()

        # Owners tab (placeholder)
        owners_tab = QWidget()
        self.tab_widget.addTab(owners_tab, "👥 Owners")

        # Location tab (placeholder)
        location_tab = QWidget()
        self.tab_widget.addTab(location_tab, "📍 Location")

        # Billing tab (placeholder)
        billing_tab = QWidget()
        self.tab_widget.addTab(billing_tab, "💰 Billing")

        # History tab (placeholder)
        history_tab = QWidget()
        self.tab_widget.addTab(history_tab, "📊 History")

        parent_layout.addWidget(self.tab_widget)

    def setup_basic_info_tab(self):
        """Setup basic information tab with form fields"""
        self.basic_info_tab = QWidget()
        basic_layout = QVBoxLayout(self.basic_info_tab)
        basic_layout.setContentsMargins(20, 20, 20, 20)
        basic_layout.setSpacing(15)

        # Scroll area for form
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setFrameStyle(QFrame.Shape.NoFrame)

        form_widget = QWidget()
        form_layout = QGridLayout(form_widget)
        form_layout.setSpacing(15)

        # Form fields
        self.form_fields = {}
        fields = [
            ("Name", "horse_name", "text", True),
            ("Account Number", "account_number", "text", False),
            ("Breed", "breed", "text", False),
            ("Color", "color", "text", False),
            ("Sex", "sex", "combo", False),
            ("Date of Birth", "date_of_birth", "date", False),
            ("Registration Number", "registration_number", "text", False),
            ("Microchip ID", "microchip_id", "text", False),
            ("Tattoo", "tattoo", "text", False),
            ("Brand", "brand", "text", False),
            ("Current Location", "current_location_id", "combo", False),
            ("Band/Tag Number", "band_tag_number", "text", False),
        ]

        for i, (label_text, field_name, field_type, required) in enumerate(fields):
            row, col = i // 2, (i % 2) * 2

            # Label
            label = QLabel(label_text + ("*" if required else "") + ":")
            label.setStyleSheet("font-weight: 500; color: #333;")
            if required:
                label.setStyleSheet("font-weight: bold; color: #333;")

            # Field
            if field_type == "text":
                field = QLineEdit()
                field.setStyleSheet(self.get_input_style())
                field.textChanged.connect(self.on_field_changed)
            elif field_type == "combo":
                field = QComboBox()
                field.setStyleSheet(self.get_combo_style())
                field.currentTextChanged.connect(self.on_field_changed)

                if field_name == "sex":
                    field.addItems(
                        ["", "Male", "Female", "Gelding", "Stallion", "Mare"]
                    )
                elif field_name == "current_location_id":
                    self.load_locations_combo(field)
            elif field_type == "date":
                field = QDateEdit()
                field.setCalendarPopup(True)
                field.setStyleSheet(self.get_input_style())
                field.dateChanged.connect(self.on_field_changed)

            field.setMinimumHeight(40)
            form_layout.addWidget(label, row, col)
            form_layout.addWidget(field, row, col + 1)

            self.form_fields[field_name] = field

        scroll_area.setWidget(form_widget)
        basic_layout.addWidget(scroll_area)

        self.tab_widget.addTab(self.basic_info_tab, "📋 Basic Info")

    def setup_detail_actions(self, parent_layout):
        """Setup action buttons for horse details"""
        actions_frame = QFrame()
        actions_layout = QHBoxLayout(actions_frame)
        actions_layout.setContentsMargins(20, 0, 20, 0)

        actions_layout.addStretch()

        self.save_btn = QPushButton("💾 Save Changes")
        self.save_btn.setStyleSheet(
            f"""
            QPushButton {{
                background-color: {AppConfig.SUCCESS_COLOR};
                color: white;
                border: none;
                border-radius: 6px;
                padding: 12px 24px;
                font-weight: 500;
                font-size: 14px;
            }}
            QPushButton:hover {{
                background-color: #218838;
            }}
            QPushButton:disabled {{
                background-color: #6c757d;
            }}
        """
        )
        self.save_btn.setEnabled(False)

        self.discard_btn = QPushButton("↩️ Discard Changes")
        self.discard_btn.setStyleSheet(
            f"""
            QPushButton {{
                background-color: transparent;
                color: {AppConfig.SECONDARY_COLOR};
                border: 2px solid {AppConfig.SECONDARY_COLOR};
                border-radius: 6px;
                padding: 10px 22px;
                font-weight: 500;
                font-size: 14px;
            }}
            QPushButton:hover {{
                background-color: {AppConfig.SECONDARY_COLOR};
                color: white;
            }}
            QPushButton:disabled {{
                opacity: 0.5;
            }}
        """
        )
        self.discard_btn.setEnabled(False)

        actions_layout.addWidget(self.save_btn)
        actions_layout.addWidget(self.discard_btn)

        parent_layout.addWidget(actions_frame)

    def setup_status_bar(self, parent_layout):
        """Setup status bar"""
        self.status_frame = QFrame()
        self.status_frame.setStyleSheet(
            """
            QFrame {
                background-color: #f8f9fa;
                border-top: 1px solid #e0e0e0;
                padding: 0;
            }
        """
        )
        status_layout = QHBoxLayout(self.status_frame)
        status_layout.setContentsMargins(20, 8, 20, 8)

        self.status_label = QLabel("Ready")
        self.status_label.setStyleSheet("color: #666; font-size: 12px;")

        self.shortcut_label = QLabel(
            "F5=Refresh | Ctrl+N=New | Ctrl+S=Save | Del=Delete"
        )
        self.shortcut_label.setStyleSheet("color: #666; font-size: 12px;")

        status_layout.addWidget(self.status_label)
        status_layout.addStretch()
        status_layout.addWidget(self.shortcut_label)

        parent_layout.addWidget(self.status_frame)

    def setup_connections(self):
        """Setup signal connections"""
        # Buttons
        self.add_horse_btn.clicked.connect(self.add_new_horse)
        self.edit_horse_btn.clicked.connect(self.edit_selected_horse)
        self.delete_horse_btn.clicked.connect(self.delete_selected_horse)
        self.refresh_btn.clicked.connect(self.refresh_data)
        self.help_btn.clicked.connect(self.show_help)
        self.exit_btn.clicked.connect(self.exit_application)

        # Filter toggles
        self.active_only_btn.clicked.connect(self.on_filter_changed)
        self.all_horses_btn.clicked.connect(self.on_filter_changed)

        # Search
        self.search_input.textChanged.connect(self.on_search_text_changed)

        # Horse list
        self.horse_list.itemSelectionChanged.connect(self.on_selection_changed)

        # Save/Discard buttons
        self.save_btn.clicked.connect(self.save_changes)
        self.discard_btn.clicked.connect(self.discard_changes)

    def load_initial_data(self):
        """Load initial data"""
        self.load_horses()
        self.load_locations_combo(self.form_fields.get("current_location_id"))

    def load_horses(self):
        """Load horses into the list"""
        active_only = self.active_only_btn.isChecked()
        search_term = self.search_input.text()

        self.horses_list = self.controller.search_horses(search_term, active_only)
        self.populate_horse_list()
        self.update_status(f"Loaded {len(self.horses_list)} horses")

    def populate_horse_list(self):
        """Populate the horse list widget"""
        self.horse_list.clear()

        for horse in self.horses_list:
            item = QListWidgetItem()

            # Create custom widget for horse item
            item_widget = self.create_horse_list_item(horse)
            item.setSizeHint(item_widget.sizeHint())

            self.horse_list.addItem(item)
            self.horse_list.setItemWidget(item, item_widget)

            # Store horse data
            item.setData(Qt.ItemDataRole.UserRole, horse.horse_id)

        # Update count
        self.horse_count_label.setText(f"{len(self.horses_list)} total")

    def create_horse_list_item(self, horse):
        """Create widget for horse list item"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(4)

        # Horse name
        name_label = QLabel(horse.horse_name)
        name_label.setFont(QFont(AppConfig.DEFAULT_FONT_FAMILY, 14, QFont.Weight.Bold))
        name_label.setStyleSheet("color: #333;")

        # Account and breed
        info_label = QLabel(
            f"Acct: {horse.account_number or 'N/A'} | {horse.breed or 'Unknown breed'}"
        )
        info_label.setStyleSheet("color: #666; font-size: 12px;")

        # Color, sex, age
        details_label = QLabel(
            f"{horse.color or 'Unknown'} | {horse.sex or 'Unknown'} | {self.calculate_age(horse.date_of_birth)}"
        )
        details_label.setStyleSheet("color: #666; font-size: 12px;")

        # Location
        location_text = (
            horse.location.location_name if horse.location else "No location"
        )
        location_label = QLabel(f"📍 {location_text}")
        location_label.setStyleSheet("color: #888; font-size: 11px;")

        layout.addWidget(name_label)
        layout.addWidget(info_label)
        layout.addWidget(details_label)
        layout.addWidget(location_label)

        return widget

    def calculate_age(self, birth_date):
        """Calculate age from birth date"""
        if not birth_date:
            return "Unknown age"

        today = date.today()
        age = today.year - birth_date.year
        if today.month < birth_date.month or (
            today.month == birth_date.month and today.day < birth_date.day
        ):
            age -= 1

        return f"{age} years" if age != 1 else "1 year"

    def load_locations_combo(self, combo_widget):
        """Load locations into combo box"""
        if not combo_widget:
            return

        combo_widget.clear()
        combo_widget.addItem("", None)

        locations = self.controller.get_locations_list()
        for location in locations:
            combo_widget.addItem(location.location_name, location.location_id)

    def on_search_text_changed(self):
        """Handle search text changes"""
        self.search_timer.stop()
        self.search_timer.start(300)  # 300ms delay

    def perform_search(self):
        """Perform the actual search"""
        self.load_horses()

    def on_filter_changed(self):
        """Handle filter change"""
        if self.sender() == self.active_only_btn:
            self.all_horses_btn.setChecked(False)
        else:
            self.active_only_btn.setChecked(False)
        self.load_horses()

    def on_selection_changed(self):
        """Handle horse selection change"""
        current_item = self.horse_list.currentItem()

        if current_item:
            horse_id = current_item.data(Qt.ItemDataRole.UserRole)
            self.load_horse_details(horse_id)
            self.edit_horse_btn.setEnabled(True)
            self.delete_horse_btn.setEnabled(True)
        else:
            self.show_empty_state()
            self.edit_horse_btn.setEnabled(False)
            self.delete_horse_btn.setEnabled(False)

    def show_empty_state(self):
        """Show empty state in details panel"""
        self.empty_frame.show()
        self.horse_details_frame.hide()
        self.current_horse = None

    def load_horse_details(self, horse_id):
        """Load horse details into the details panel"""
        horse = self.controller.get_horse_by_id(horse_id)
        if not horse:
            self.show_error("Error", f"Horse with ID {horse_id} not found")
            return

        self.current_horse = horse

        # Update header info
        self.horse_title.setText(horse.horse_name)

        self.info_labels["account"].setText(horse.account_number or "N/A")
        self.info_labels["breed"].setText(horse.breed or "Unknown")
        self.info_labels["color"].setText(horse.color or "Unknown")
        self.info_labels["sex"].setText(horse.sex or "Unknown")
        self.info_labels["age"].setText(self.calculate_age(horse.date_of_birth))
        self.info_labels["location"].setText(
            f"📍 {horse.location.location_name if horse.location else 'No location'}"
        )

        # Populate form fields
        self.form_fields["horse_name"].setText(horse.horse_name or "")
        self.form_fields["account_number"].setText(horse.account_number or "")
        self.form_fields["breed"].setText(horse.breed or "")
        self.form_fields["color"].setText(horse.color or "")

        # Set sex combo
        sex_combo = self.form_fields["sex"]
        if horse.sex:
            index = sex_combo.findText(horse.sex)
            if index >= 0:
                sex_combo.setCurrentIndex(index)
        else:
            sex_combo.setCurrentIndex(0)

        # Set date
        if horse.date_of_birth:
            self.form_fields["date_of_birth"].setDate(QDate(horse.date_of_birth))

        self.form_fields["registration_number"].setText(horse.registration_number or "")
        self.form_fields["microchip_id"].setText(horse.microchip_id or "")
        self.form_fields["tattoo"].setText(horse.tattoo or "")
        self.form_fields["brand"].setText(horse.brand or "")
        self.form_fields["band_tag_number"].setText(horse.band_tag_number or "")

        # Set location combo
        location_combo = self.form_fields["current_location_id"]
        if horse.current_location_id:
            for i in range(location_combo.count()):
                if location_combo.itemData(i) == horse.current_location_id:
                    location_combo.setCurrentIndex(i)
                    break
        else:
            location_combo.setCurrentIndex(0)

        # Show details frame
        self.empty_frame.hide()
        self.horse_details_frame.show()

        # Reset change tracking
        self.has_changes = False
        self.update_change_buttons()

    def on_field_changed(self):
        """Handle field changes"""
        if self.current_horse:
            self.has_changes = True
            self.update_change_buttons()

    def update_change_buttons(self):
        """Update save/discard button states"""
        self.save_btn.setEnabled(self.has_changes)
        self.discard_btn.setEnabled(self.has_changes)

    def add_new_horse(self):
        """Add a new horse"""
        self.current_horse = None

        # Clear form fields
        for field_name, field in self.form_fields.items():
            if isinstance(field, QLineEdit):
                field.clear()
            elif isinstance(field, QComboBox):
                field.setCurrentIndex(0)
            elif isinstance(field, QDateEdit):
                field.setDate(QDate.currentDate())

        # Show details frame with empty form
        self.empty_frame.hide()
        self.horse_details_frame.show()

        # Update title and header
        self.horse_title.setText("New Horse")
        for key, label in self.info_labels.items():
            label.setText("N/A")

        # Set focus to name field
        self.form_fields["horse_name"].setFocus()

        # Reset change tracking
        self.has_changes = True
        self.update_change_buttons()

        self.update_status("Creating new horse")

    def edit_selected_horse(self):
        """Edit the selected horse"""
        # Horse details are already loaded, just set focus
        if self.current_horse:
            self.form_fields["horse_name"].setFocus()
            self.update_status(f"Editing horse: {self.current_horse.horse_name}")

    def delete_selected_horse(self):
        """Delete the selected horse"""
        if not self.current_horse:
            return

        reply = QMessageBox.question(
            self,
            "Delete Horse",
            f"Are you sure you want to delete '{self.current_horse.horse_name}'?\n\nThis action cannot be undone.",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No,
        )

        if reply == QMessageBox.StandardButton.Yes:
            success, message = self.controller.delete_horse(self.current_horse.horse_id)

            if success:
                QMessageBox.information(self, "Success", message)
                self.load_horses()  # Refresh list
                self.show_empty_state()  # Clear details
                self.update_status(f"Deleted horse: {self.current_horse.horse_name}")
                self.current_horse = None
            else:
                QMessageBox.critical(self, "Error", message)

    def save_changes(self):
        """Save current horse changes"""
        if not self.current_horse and not self.has_changes:
            return

        # Get date and convert properly for PyQt6
        date_field = self.form_fields["date_of_birth"]
        birth_date = None
        if date_field.date().isValid():
            qdate = date_field.date()
            # Try toPython() first, fallback to manual conversion
            try:
                birth_date = qdate.toPython()
            except AttributeError:
                # Manual conversion for PyQt6 versions without toPython()
                birth_date = date(qdate.year(), qdate.month(), qdate.day())

        # Collect form data
        horse_data = {
            "horse_name": self.form_fields["horse_name"].text().strip(),
            "account_number": self.form_fields["account_number"].text().strip(),
            "breed": self.form_fields["breed"].text().strip(),
            "color": self.form_fields["color"].text().strip(),
            "sex": (
                self.form_fields["sex"].currentText()
                if self.form_fields["sex"].currentText()
                else None
            ),
            "date_of_birth": birth_date,
            "registration_number": self.form_fields["registration_number"]
            .text()
            .strip(),
            "microchip_id": self.form_fields["microchip_id"].text().strip(),
            "tattoo": self.form_fields["tattoo"].text().strip(),
            "brand": self.form_fields["brand"].text().strip(),
            "band_tag_number": self.form_fields["band_tag_number"].text().strip(),
            "current_location_id": self.form_fields[
                "current_location_id"
            ].currentData(),
        }

        # Validate
        is_valid, errors = self.controller.validate_horse_data(horse_data)
        if not is_valid:
            error_message = "Please correct the following errors:\n" + "\n".join(errors)
            QMessageBox.critical(self, "Validation Error", error_message)
            return

        # Save or create
        if self.current_horse:
            # Update existing horse
            success, message = self.controller.update_horse(
                self.current_horse.horse_id, horse_data, self.current_user
            )
        else:
            # Create new horse
            success, message, horse = self.controller.create_horse(
                horse_data, self.current_user
            )
            if success:
                self.current_horse = horse

        if success:
            QMessageBox.information(self, "Success", message)
            self.has_changes = False
            self.update_change_buttons()
            self.load_horses()  # Refresh list

            # Reload current horse details
            if self.current_horse:
                self.load_horse_details(self.current_horse.horse_id)

            self.update_status(f"Saved horse: {horse_data['horse_name']}")
        else:
            QMessageBox.critical(self, "Error", message)

    def discard_changes(self):
        """Discard current changes"""
        if self.current_horse:
            # Reload original data
            self.load_horse_details(self.current_horse.horse_id)
        else:
            # Was creating new horse, show empty state
            self.show_empty_state()

        self.update_status("Changes discarded")

    def refresh_data(self):
        """Refresh all data"""
        self.load_horses()
        if self.current_horse:
            self.load_horse_details(self.current_horse.horse_id)
        self.update_status("Data refreshed")

    def show_help(self):
        """Show help dialog"""
        QMessageBox.information(
            self,
            "Help",
            """Horse Management Help
            
Navigation:
• Select a horse from the list to view/edit details
• Use the search box to filter horses
• Toggle between Active Only and All Horses

Actions:
• Add Horse: Create a new horse record
• Edit Selected: Modify the selected horse
• Delete Selected: Remove the selected horse (soft delete)

Keyboard Shortcuts:
• F5: Refresh data
• Ctrl+N: Add new horse
• Ctrl+S: Save changes
• Delete: Delete selected horse
• F1: Show this help""",
        )

    def exit_application(self):
        """Exit the horse management screen"""
        # Check for unsaved changes
        if self.has_changes:
            reply = QMessageBox.question(
                self,
                "Unsaved Changes",
                "You have unsaved changes. Are you sure you want to exit?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No,
            )
            if reply == QMessageBox.StandardButton.No:
                return

        self.exit_requested.emit()
        self.close()

    def update_status(self, message):
        """Update status bar"""
        self.status_label.setText(message)
        # Auto-clear status after 3 seconds
        QTimer.singleShot(3000, lambda: self.status_label.setText("Ready"))

    def get_input_style(self):
        """Get standard input field styling"""
        return f"""
            QLineEdit, QDateEdit {{
                border: 2px solid #e0e0e0;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 14px;
                background-color: white;
            }}
            QLineEdit:focus, QDateEdit:focus {{
                border-color: {AppConfig.PRIMARY_COLOR};
                box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
            }}
        """

    def get_combo_style(self):
        """Get standard combo box styling"""
        return f"""
            QComboBox {{
                border: 2px solid #e0e0e0;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 14px;
                background-color: white;
            }}
            QComboBox:focus {{
                border-color: {AppConfig.PRIMARY_COLOR};
                box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
            }}
            QComboBox::drop-down {{
                border: none;
                width: 30px;
            }}
            QComboBox::down-arrow {{
                width: 12px;
                height: 12px;
            }}
        """

    def keyPressEvent(self, event):
        """Handle keyboard shortcuts"""
        key = event.key()
        modifiers = event.modifiers()

        if key == Qt.Key.Key_F5:
            self.refresh_data()
        elif modifiers == Qt.KeyboardModifier.ControlModifier and key == Qt.Key.Key_N:
            self.add_new_horse()
        elif modifiers == Qt.KeyboardModifier.ControlModifier and key == Qt.Key.Key_S:
            self.save_changes()
        elif key == Qt.Key.Key_Delete:
            self.delete_selected_horse()
        elif key == Qt.Key.Key_F1:
            self.show_help()
        elif key == Qt.Key.Key_Escape:
            self.exit_application()
        else:
            super().keyPressEvent(event)

================================================================================
END OF views/horse/horse_unified_management.py
================================================================================


================================================================================
FILE 20/20: requirements.txt
================================================================================

# Core dependencies - Using PySide6 instead of PyQt6 for better Windows compatibility
PySide6>=6.6.0
SQLAlchemy==2.0.23
sqlalchemy-utils==0.41.1

# Development dependencies
pytest>=7.4.0
pytest-qt>=4.2.0

# Additional utilities
python-dateutil>=2.8.0
cryptography>=42.0.0
pillow>=10.0.0

# Logging and debugging
colorlog>=6.8.0

================================================================================
END OF requirements.txt
================================================================================

